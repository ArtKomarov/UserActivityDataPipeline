services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.8.0
    container_name: zookeeper
    networks:
      - data-pipeline-net
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181

  kafka:
    image: confluentinc/cp-kafka:7.8.0
    container_name: kafka
    networks:
      - data-pipeline-net
    ports:
      - "9092:9092"
      - "9999:9999"
    depends_on:
      - zookeeper
    environment:
      # --- Connectivity ---
      KAFKA_LISTENERS: INTERNAL://0.0.0.0:19092,EXTERNAL://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:19092,EXTERNAL://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_BROKER_ID: 1

      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
    volumes:
      - kafka_data:/var/lib/kafka/data

  mongodb:
    image: mongo:8.0
    container_name: mongodb
    networks:
      - data-pipeline-net
    ports:
      - "27018:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
    volumes:
      - mongodb_data:/data/db
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.runCommand('ping').ok"]
      interval: 5s
      timeout: 4s
      retries: 10
      start_period: 4s # Give MongoDB time to start before checking

  mongo-express:
    image: mongo-express:1.0
    container_name: mongo-express
    networks:
      - data-pipeline-net
    restart: always
    ports:
      - 8088:8081 # Access on http://localhost:8088
    environment:
      ME_CONFIG_MONGODB_SERVER: mongodb
      ME_CONFIG_MONGODB_PORT: 27017
      ME_CONFIG_MONGODB_AUTH_USERNAME: ${ME_CONFIG_MONGODB_AUTH_USERNAME}
      ME_CONFIG_MONGODB_AUTH_PASSWORD: ${ME_CONFIG_MONGODB_AUTH_PASSWORD}
      ME_CONFIG_BASICAUTH_USERNAME: ${ME_CONFIG_BASICAUTH_USERNAME}
      ME_CONFIG_BASICAUTH_PASSWORD: ${ME_CONFIG_BASICAUTH_PASSWORD}
      ME_CONFIG_MONGODB_AUTH_MECHANISM: SCRAM-SHA-256
    depends_on:
      mongodb:
        condition: service_healthy

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    networks:
      - data-pipeline-net
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml

  grafana:
    image: grafana/grafana:12.2.1
    container_name: grafana
    networks:
      - data-pipeline-net
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GF_SECURITY_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GF_SECURITY_ADMIN_PASSWORD}
    volumes:
      - ./config/grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
      - ./config/grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards
      - ./config/grafana/provisioning/alerting:/etc/grafana/provisioning/alerting

  producer:
    build:
      context: ./producer
    container_name: producer
    networks:
      - data-pipeline-net
    ports:
      - "8081:8080"
    depends_on:
      - kafka
    restart: always

  consumer:
    build:
      context: ./consumer
    container_name: consumer
    networks:
      - data-pipeline-net
    ports:
      - "8082:8080"
    depends_on:
      kafka:
        condition: service_started
      mongodb:
        condition: service_healthy
    restart: always

networks:
  data-pipeline-net:
    driver: bridge

volumes:
  mongodb_data:
  kafka_data:
